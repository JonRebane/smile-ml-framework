package shapelet.evolution.test;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.junit.Test;

import data_structures.Pair;
import data_structures.Sequence;
import experiment.ExperimentUtil;
import io.IOService;
import stife.shapelet.evolution.EvolutionEngine;
import stife.shapelet.evolution.FitnessEvaluator;
import stife.shapelet.evolution.NShapelet;
import stife.shapelet.evolution.NShapeletFitnessEvaluator;
import stife.shapelet.evolution.SelectionAlgorithm;
import stife.shapelet.evolution.ShapeletRf;
import stife.shapelet.evolution.TournamentSelection;
import stife.shapelet.evolution.evolution.alterers.MutationStrategy;
import stife.shapelet.evolution.evolution.alterers.ShapeletAppender;
import stife.shapelet.evolution.evolution.alterers.ShapeletEndEventMutator;
import stife.shapelet.evolution.evolution.alterers.ShapeletEndRelationshipMutator;
import stife.shapelet.evolution.evolution.alterers.ShapeletEndRemover;
import stife.shapelet.evolution.evolution.alterers.WeightedCompositeMutator;
import stife.shapelet_size2.Shapelet_Size2;
import util.FileDiffer;
import util.OutputRedirector;

public class EvolutionEngineTest {

	private static int epsilon = 5;
	private static int tournamentSize = 2;
	private static double p = 1.0;
	private static int populationSize = 100;
	private static int numGenerations = 100;

	private static void assertFeatureEquality(List<NShapelet> features, List<NShapelet> features2) {
		for(int i=0;i<features.size();i++){
			assertTrue(features.get(i).isEqualTo(features2.get(i)));
		}
	}

	private static List<NShapelet> getEvolvedFeatures(Random random) throws IOException {
		File testData = new File("data/singleLabelDatasets/HEPATITIS");
		List<Sequence> database = IOService.readSequenceData(testData);
		List<Integer> classIds = IOService.readClassData(testData);
		//mutator
		List<Pair<MutationStrategy<NShapelet>, Double>> operators = new ArrayList<>();
		int maxEventLabel = Sequence.getDimensionSet(database).descendingIterator().next();
		//training and test data split
		List<Integer> allIndices = ExperimentUtil.getShuffledIndices(database, random);
		List<Integer> trainIndices = ExperimentUtil.getTrainingIndices(allIndices, 0,10);
		List<Sequence> train = ExperimentUtil.getAll(database,trainIndices);
		List<Integer> trainClassIds = ExperimentUtil.getAll(classIds,trainIndices);	
		
		operators.add(new Pair<>(new ShapeletAppender(random, maxEventLabel ),  0.02));
		operators.add(new Pair<>(new ShapeletEndEventMutator(random, maxEventLabel ),  0.4));
		operators.add(new Pair<>(new ShapeletEndRelationshipMutator(random),  0.4));
		operators.add(new Pair<>(new ShapeletEndRemover(random),  0.02));
		
		WeightedCompositeMutator mutator = new WeightedCompositeMutator(random, operators );
		SelectionAlgorithm<NShapelet> selectionStrategy = new TournamentSelection(tournamentSize, p, random);
		FitnessEvaluator<NShapelet> evaluator = new NShapeletFitnessEvaluator(train, trainClassIds, epsilon );
		EvolutionEngine<NShapelet> engine = new EvolutionEngine<>(populationSize , numGenerations, mutator, selectionStrategy , evaluator , 75,NShapelet.nShapeletComparator);
		engine.runEvolution(getInitialGeneration(train,random));
		engine.printBest();
		return engine.getBestFeatures();
	}
	
	private static List<NShapelet> getInitialGeneration(List<Sequence> database,Random random) {
		List<Integer> dims = new ArrayList<>(Sequence.getDimensionSet(database));
		List<NShapelet> shapelets = new ArrayList<>();
		for(int i=0;i<populationSize;i++){
			Shapelet_Size2 basis = new Shapelet_Size2(
					dims.get(random.nextInt(dims.size())),
					dims.get(random.nextInt(dims.size())),
					random.nextInt(Sequence.NUM_RELATIONSHIPS));
			shapelets.add(new NShapelet(basis));
		}
		return shapelets;
	}
	
	@Test
	public void simplestTest() throws IOException {
		File outFile1 = new File("testdata/EvolutionEngineLogs/out1.txt");
		File outFile2 = new File("testdata/EvolutionEngineLogs/out2.txt");
		OutputRedirector redirector = new OutputRedirector(outFile1 );
		redirector.redirectSysout();
		Random random = new Random(13);
		List<NShapelet> features = getEvolvedFeatures(random);
		redirector.terminateRedirection();
		redirector = new OutputRedirector(outFile2);
		redirector.redirectSysout();
		random = new Random(13);
		List<NShapelet> features2 = getEvolvedFeatures(random);
		redirector.terminateRedirection();
		checkFileDiff(outFile1,outFile2);
		assertFeatureEquality(features,features2);
	}

	private void checkFileDiff(File outFile1, File outFile2) throws IOException {
		System.out.println("starting file diff");
		FileDiffer differ = new FileDiffer(outFile1,outFile2);
		differ.searchFirstDiff();
	}

	@Test
	public void getBestAfterFirstGen() throws IOException{
		MyRandom random = new MyRandom(13);
		List<NShapelet> features = getBestAfterFirstGenFeatures(random,100, 0, new TournamentSelection(tournamentSize, p, random));
		random.restart();
		List<NShapelet> features2 = getBestAfterFirstGenFeatures(random,1, 0, new TournamentSelection(tournamentSize, p, random));
		assertFeatureEquality(features,features2);
	}
	
	@Test
	public void getBestAfterSecondGen() throws IOException{
		assertEquals(
				"[[(5 overlaps 53)], [(11 meets 34)], [(19 meets 43)], [(20 overlaps 41)], [(24 matches 20)], [(24 matches 27)], [(32 contains 24)], [(36 matches 36)], [(36 leftContains 36)], [(38 meets 35)], [(40 contains 9)], [(44 overlaps 18)], [(49 overlaps 33)], [(51 meets 41)], [(52 overlaps 44)], [(53 matches 17)], [(53 meets 44)], [(53 leftContains 57)], [(54 contains 45)], [(57 contains 7)], [(16 meets 61), (61 leftContains 59)], [(62 meets 32), (32 overlaps 1)], [(40 rightContains 5)], [(27 leftContains 57)], [(14 rightContains 39)], [(31 rightContains 41)], [(40 contains 14)], [(43 contains 12)], [(15 contains 28)], [(59 matches 40)], [(5 overlaps 16)], [(10 rightContains 42)], [(23 overlaps 11)], [(39 overlaps 13)], [(21 contains 50)], [(34 meets 3)], [(15 meets 6)], [(8 rightContains 6)], [(52 overlaps 59)], [(54 matches 9)], [(6 meets 9)], [(19 followedBy 49)], [(13 meets 1)], [(29 matches 1)], [(38 contains 18)], [(54 overlaps 60)], [(19 overlaps 1)], [(18 contains 54)], [(3 leftContains 59)], [(58 rightContains 18)], [(22 leftContains 30)], [(11 rightContains 56)], [(40 followedBy 21)], [(6 contains 47)], [(11 matches 19)], [(42 meets 60)], [(48 leftContains 15)], [(51 meets 50)], [(54 contains 34)], [(55 leftContains 45)], [(62 meets 61)], [(29 overlaps 14)], [(18 followedBy 51)], [(19 leftContains 5)], [(11 followedBy 31)], [(41 followedBy 33)], [(22 contains 51)], [(46 leftContains 12)], [(10 rightContains 33)], [(8 meets 21)], [(41 leftContains 58)], [(43 meets 63)], [(49 contains 22)], [(56 matches 50)], [(40 followedBy 39)], [(6 matches 43)], [(20 matches 47)], [(39 overlaps 45)], [(54 followedBy 30)], [(18 overlaps 3)], [(8 rightContains 11)], [(37 leftContains 22)], [(54 overlaps 23)], [(38 matches 20)], [(54 followedBy 15)], [(8 overlaps 56)], [(10 matches 17)], [(1 leftContains 57)], [(11 meets 13)], [(55 overlaps 36)], [(23 leftContains 24)], [(23 contains 25)], [(27 overlaps 55)], [(3 rightContains 4)], [(46 contains 33)], [(16 contains 46)], [(47 contains 43)], [(2 leftContains 52)], [(16 leftContains 52)], [(27 contains 7)]]",
				"[[(5 overlaps 53)], [(11 meets 34)], [(19 meets 43)], [(20 overlaps 41)], [(24 matches 20)], [(24 matches 27)], [(32 contains 24)], [(36 matches 36)], [(36 leftContains 36)], [(38 meets 35)], [(40 contains 9)], [(44 overlaps 18)], [(49 overlaps 33)], [(51 meets 41)], [(52 overlaps 44)], [(53 matches 17)], [(53 meets 44)], [(53 leftContains 57)], [(54 contains 45)], [(57 contains 7)], [(16 meets 61), (61 leftContains 59)], [(62 meets 32), (32 overlaps 1)], [(40 rightContains 5)], [(27 leftContains 57)], [(14 rightContains 39)], [(31 rightContains 41)], [(40 contains 14)], [(43 contains 12)], [(15 contains 28)], [(59 matches 40)], [(5 overlaps 16)], [(10 rightContains 42)], [(23 overlaps 11)], [(39 overlaps 13)], [(21 contains 50)], [(34 meets 3)], [(15 meets 6)], [(8 rightContains 6)], [(52 overlaps 59)], [(54 matches 9)], [(6 meets 9)], [(19 followedBy 49)], [(13 meets 1)], [(29 matches 1)], [(38 contains 18)], [(54 overlaps 60)], [(19 overlaps 1)], [(18 contains 54)], [(3 leftContains 59)], [(58 rightContains 18)], [(22 leftContains 30)], [(11 rightContains 56)], [(40 followedBy 21)], [(6 contains 47)], [(11 matches 19)], [(42 meets 60)], [(48 leftContains 15)], [(51 meets 50)], [(54 contains 34)], [(55 leftContains 45)], [(62 meets 61)], [(29 overlaps 14)], [(18 followedBy 51)], [(19 leftContains 5)], [(11 followedBy 31)], [(41 followedBy 33)], [(22 contains 51)], [(46 leftContains 12)], [(10 rightContains 33)], [(8 meets 21)], [(41 leftContains 58)], [(43 meets 63)], [(49 contains 22)], [(56 matches 50)], [(40 followedBy 39)], [(6 matches 43)], [(20 matches 47)], [(39 overlaps 45)], [(54 followedBy 30)], [(18 overlaps 3)], [(8 rightContains 11)], [(37 leftContains 22)], [(54 overlaps 23)], [(38 matches 20)], [(54 followedBy 15)], [(8 overlaps 56)], [(10 matches 17)], [(1 leftContains 57)], [(11 meets 13)], [(55 overlaps 36)], [(23 leftContains 24)], [(23 contains 25)], [(27 overlaps 55)], [(3 rightContains 4)], [(46 contains 33)], [(16 contains 46)], [(47 contains 43)], [(2 leftContains 52)], [(16 leftContains 52)], [(27 contains 7)]]");
		Random random = new Random(13);
		TournamentSelection myTournamentSelection = new TournamentSelection(tournamentSize, p, random);
		List<NShapelet> features = getBestAfterFirstGenFeatures(random,2, 1,myTournamentSelection);
		random=new Random(13);
		myTournamentSelection = new TournamentSelection(tournamentSize, p, random);
		List<NShapelet> features2 = getBestAfterFirstGenFeatures(random,2, 1, myTournamentSelection);
		assertFeatureEquality(features,features2);
	}
	
	@Test
	public void stringEqualityTest(){
		//chosen:
		assertEquals(
				"[[(19 overlaps 1)], [(18 followedBy 51)]][[(58 rightContains 18)], [(54 followedBy 15)]][[(54 matches 9)], [(29 matches 1)]][[(59 matches 40)], [(31 rightContains 41)]][[(31 rightContains 41)], [(13 meets 1)]][[(19 meets 43)], [(11 followedBy 31)]][[(46 contains 33)], [(19 overlaps 1)]][[(10 rightContains 33)], [(40 contains 14)]][[(29 matches 1)], [(34 meets 3)]][[(18 contains 54)], [(51 meets 50)]][[(62 meets 61)], [(14 rightContains 39)]][[(38 meets 35)], [(19 overlaps 1)]][[(41 leftContains 58)], [(5 overlaps 53)]][[(56 matches 50)], [(42 meets 60)]][[(3 leftContains 59)], [(15 contains 28)]][[(27 contains 7)], [(22 contains 51)]][[(14 rightContains 39)], [(6 matches 43)]][[(18 contains 54)], [(62 meets 61)]][[(1 leftContains 57)], [(38 contains 18)]][[(11 meets 34)], [(59 matches 40)]][[(57 contains 7)], [(10 rightContains 33)]][[(38 matches 20)], [(5 overlaps 53)]][[(39 overlaps 45)], [(8 overlaps 56)]][[(11 followedBy 31)], [(23 overlaps 11)]][[(56 matches 50)], [(15 contains 28)]][[(55 leftContains 45)], [(29 matches 1)]][[(39 overlaps 13)], [(14 rightContains 39)]][[(51 meets 41)], [(49 contains 22)]][[(52 overlaps 59)], [(55 overlaps 36)]][[(54 overlaps 60)], [(27 contains 7)]][[(23 overlaps 11)], [(48 leftContains 15)]][[(10 rightContains 42)], [(27 leftContains 57)]][[(62 meets 61)], [(62 meets 32), (32 overlaps 1)]][[(11 followedBy 31)], [(3 rightContains 4)]][[(27 contains 7)], [(34 meets 3)]][[(8 overlaps 56)], [(39 overlaps 45)]][[(43 meets 63)], [(40 followedBy 21)]][[(8 rightContains 6)], [(18 overlaps 3)]][[(57 contains 7)], [(22 leftContains 30)]][[(21 contains 50)], [(6 contains 47)]][[(19 overlaps 1)], [(49 overlaps 33)]][[(38 meets 35)], [(31 rightContains 41)]][[(14 rightContains 39)], [(54 followedBy 30)]][[(20 overlaps 41)], [(44 overlaps 18)]][[(20 matches 47)], [(27 leftContains 57)]][[(62 meets 32), (32 overlaps 1)], [(23 overlaps 11)]][[(52 overlaps 44)], [(53 leftContains 57)]][[(43 contains 12)], [(41 leftContains 58)]][[(54 contains 34)], [(41 leftContains 58)]][[(62 meets 61)], [(39 overlaps 13)]][[(54 contains 45)], [(8 meets 21)]][[(3 rightContains 4)], [(8 rightContains 6)]][[(40 contains 14)], [(39 overlaps 45)]][[(14 rightContains 39)], [(6 meets 9)]][[(54 overlaps 23)], [(40 followedBy 21)]][[(40 contains 9)], [(51 meets 50)]][[(8 rightContains 11)], [(6 matches 43)]][[(49 overlaps 33)], [(42 meets 60)]][[(13 meets 1)], [(40 followedBy 39)]][[(29 overlaps 14)], [(18 overlaps 3)]][[(31 rightContains 41)], [(58 rightContains 18)]][[(49 overlaps 33)], [(27 overlaps 55)]][[(52 overlaps 44)], [(19 followedBy 49)]][[(6 meets 9)], [(55 leftContains 45)]][[(62 meets 61)], [(27 contains 7)]][[(54 matches 9)], [(5 overlaps 53)]][[(20 overlaps 41)], [(43 meets 63)]][[(37 leftContains 22)], [(27 leftContains 57)]][[(29 matches 1)], [(52 overlaps 44)]][[(19 overlaps 1)], [(10 rightContains 42)]][[(6 contains 47)], [(23 leftContains 24)]][[(22 contains 51)], [(62 meets 61)]][[(40 contains 9)], [(49 overlaps 33)]][[(49 contains 22)], [(29 overlaps 14)]][[(53 meets 44)], [(54 followedBy 15)]][[(37 leftContains 22)], [(36 matches 36)]][[(20 matches 47)], [(39 overlaps 13)]][[(59 matches 40)], [(52 overlaps 59)]][[(54 overlaps 60)], [(46 leftContains 12)]][[(57 contains 7)], [(52 overlaps 44)]][[(40 followedBy 39)], [(53 leftContains 57)]][[(32 contains 24)], [(55 overlaps 36)]][[(49 contains 22)], [(57 contains 7)]][[(37 leftContains 22)], [(13 meets 1)]][[(8 overlaps 56)], [(6 matches 43)]][[(6 matches 43)], [(48 leftContains 15)]][[(54 contains 45)], [(18 contains 54)]][[(38 meets 35)], [(54 matches 9)]][[(54 followedBy 30)], [(41 followedBy 33)]][[(48 leftContains 15)], [(16 leftContains 52)]][[(54 followedBy 30)], [(15 contains 28)]][[(8 rightContains 6)], [(15 contains 28)]][[(36 leftContains 36)], [(23 contains 25)]][[(40 followedBy 39)], [(46 leftContains 12)]][[(36 matches 36)], [(8 rightContains 6)]][[(6 matches 43)], [(36 leftContains 36)]][[(5 overlaps 16)], [(16 meets 61), (61 leftContains 59)]][[(51 meets 41)], [(40 rightContains 5)]][[(55 leftContains 45)], [(19 meets 43)]][[(40 followedBy 39)], [(11 followedBy 31)]]"
				,"[[(19 overlaps 1)], [(18 followedBy 51)]][[(58 rightContains 18)], [(54 followedBy 15)]][[(54 matches 9)], [(29 matches 1)]][[(59 matches 40)], [(31 rightContains 41)]][[(31 rightContains 41)], [(13 meets 1)]][[(19 meets 43)], [(11 followedBy 31)]][[(46 contains 33)], [(19 overlaps 1)]][[(10 rightContains 33)], [(40 contains 14)]][[(29 matches 1)], [(34 meets 3)]][[(18 contains 54)], [(51 meets 50)]][[(62 meets 61)], [(14 rightContains 39)]][[(38 meets 35)], [(19 overlaps 1)]][[(41 leftContains 58)], [(5 overlaps 53)]][[(56 matches 50)], [(42 meets 60)]][[(3 leftContains 59)], [(15 contains 28)]][[(27 contains 7)], [(22 contains 51)]][[(14 rightContains 39)], [(6 matches 43)]][[(18 contains 54)], [(62 meets 61)]][[(1 leftContains 57)], [(38 contains 18)]][[(11 meets 34)], [(59 matches 40)]][[(57 contains 7)], [(10 rightContains 33)]][[(38 matches 20)], [(5 overlaps 53)]][[(39 overlaps 45)], [(8 overlaps 56)]][[(11 followedBy 31)], [(23 overlaps 11)]][[(56 matches 50)], [(15 contains 28)]][[(55 leftContains 45)], [(29 matches 1)]][[(39 overlaps 13)], [(14 rightContains 39)]][[(51 meets 41)], [(49 contains 22)]][[(52 overlaps 59)], [(55 overlaps 36)]][[(54 overlaps 60)], [(27 contains 7)]][[(23 overlaps 11)], [(48 leftContains 15)]][[(10 rightContains 42)], [(27 leftContains 57)]][[(62 meets 61)], [(62 meets 32), (32 overlaps 1)]][[(11 followedBy 31)], [(3 rightContains 4)]][[(27 contains 7)], [(34 meets 3)]][[(8 overlaps 56)], [(39 overlaps 45)]][[(43 meets 63)], [(40 followedBy 21)]][[(8 rightContains 6)], [(18 overlaps 3)]][[(57 contains 7)], [(22 leftContains 30)]][[(21 contains 50)], [(6 contains 47)]][[(19 overlaps 1)], [(49 overlaps 33)]][[(38 meets 35)], [(31 rightContains 41)]][[(14 rightContains 39)], [(54 followedBy 30)]][[(20 overlaps 41)], [(44 overlaps 18)]][[(20 matches 47)], [(27 leftContains 57)]][[(62 meets 32), (32 overlaps 1)], [(23 overlaps 11)]][[(52 overlaps 44)], [(53 leftContains 57)]][[(43 contains 12)], [(41 leftContains 58)]][[(54 contains 34)], [(41 leftContains 58)]][[(62 meets 61)], [(39 overlaps 13)]][[(54 contains 45)], [(8 meets 21)]][[(3 rightContains 4)], [(8 rightContains 6)]][[(40 contains 14)], [(39 overlaps 45)]][[(14 rightContains 39)], [(6 meets 9)]][[(54 overlaps 23)], [(40 followedBy 21)]][[(40 contains 9)], [(51 meets 50)]][[(8 rightContains 11)], [(6 matches 43)]][[(49 overlaps 33)], [(42 meets 60)]][[(13 meets 1)], [(40 followedBy 39)]][[(29 overlaps 14)], [(18 overlaps 3)]][[(31 rightContains 41)], [(58 rightContains 18)]][[(49 overlaps 33)], [(27 overlaps 55)]][[(52 overlaps 44)], [(19 followedBy 49)]][[(6 meets 9)], [(55 leftContains 45)]][[(62 meets 61)], [(27 contains 7)]][[(54 matches 9)], [(5 overlaps 53)]][[(20 overlaps 41)], [(43 meets 63)]][[(37 leftContains 22)], [(27 leftContains 57)]][[(29 matches 1)], [(52 overlaps 44)]][[(19 overlaps 1)], [(10 rightContains 42)]][[(6 contains 47)], [(23 leftContains 24)]][[(22 contains 51)], [(62 meets 61)]][[(40 contains 9)], [(49 overlaps 33)]][[(49 contains 22)], [(29 overlaps 14)]][[(53 meets 44)], [(54 followedBy 15)]][[(37 leftContains 22)], [(36 matches 36)]][[(20 matches 47)], [(39 overlaps 13)]][[(59 matches 40)], [(52 overlaps 59)]][[(54 overlaps 60)], [(46 leftContains 12)]][[(57 contains 7)], [(52 overlaps 44)]][[(40 followedBy 39)], [(53 leftContains 57)]][[(32 contains 24)], [(55 overlaps 36)]][[(49 contains 22)], [(57 contains 7)]][[(37 leftContains 22)], [(13 meets 1)]][[(8 overlaps 56)], [(6 matches 43)]][[(6 matches 43)], [(48 leftContains 15)]][[(54 contains 45)], [(18 contains 54)]][[(38 meets 35)], [(54 matches 9)]][[(54 followedBy 30)], [(41 followedBy 33)]][[(48 leftContains 15)], [(16 leftContains 52)]][[(54 followedBy 30)], [(15 contains 28)]][[(8 rightContains 6)], [(15 contains 28)]][[(36 leftContains 36)], [(23 contains 25)]][[(40 followedBy 39)], [(46 leftContains 12)]][[(36 matches 36)], [(8 rightContains 6)]][[(6 matches 43)], [(36 leftContains 36)]][[(5 overlaps 16)], [(16 meets 61), (61 leftContains 59)]][[(51 meets 41)], [(40 rightContains 5)]][[(55 leftContains 45)], [(19 meets 43)]][[(40 followedBy 39)], [(11 followedBy 31)]]");
		//tournament:
		assertEquals(
				"[([(19 overlaps 1)],7.859987625407072E-4), ([(18 followedBy 51)],0.0018735786714009217)][([(58 rightContains 18)],0.0012300145433652432), ([(54 followedBy 15)],0.005459007014446349)][([(54 matches 9)],3.0729684555663717E-4), ([(29 matches 1)],6.299925046362453E-4)][([(31 rightContains 41)],1.0150093997407517E-4), ([(59 matches 40)],1.270150185044283E-4)][([(31 rightContains 41)],1.0150093997407517E-4), ([(13 meets 1)],4.943864050742652E-4)][([(19 meets 43)],0.0), ([(11 followedBy 31)],0.0020870246663982073)][([(19 overlaps 1)],7.859987625407072E-4), ([(46 contains 33)],0.01766627489528194)][([(40 contains 14)],1.0150093997407517E-4), ([(10 rightContains 33)],0.002848505633154641)][([(34 meets 3)],2.154946234077526E-4), ([(29 matches 1)],6.299925046362453E-4)][([(18 contains 54)],8.629532799018236E-4), ([(51 meets 50)],0.0017089211363298107)][([(14 rightContains 39)],1.492878443665191E-5), ([(62 meets 61)],0.0017089211363298107)][([(38 meets 35)],0.0), ([(19 overlaps 1)],7.859987625407072E-4)][([(5 overlaps 53)],0.0), ([(41 leftContains 58)],0.002854094957552178)][([(42 meets 60)],0.0017089211363298107), ([(56 matches 50)],0.002854094957552178)][([(15 contains 28)],1.270150185044283E-4), ([(3 leftContains 59)],0.001046680162928748)][([(22 contains 51)],0.0022544161489371772), ([(27 contains 7)],0.03845031652680586)][([(14 rightContains 39)],1.492878443665191E-5), ([(6 matches 43)],0.003422887354147086)][([(18 contains 54)],8.629532799018236E-4), ([(62 meets 61)],0.0017089211363298107)][([(38 contains 18)],7.470374367392063E-4), ([(1 leftContains 57)],0.00859323597987538)][([(11 meets 34)],0.0), ([(59 matches 40)],1.270150185044283E-4)][([(57 contains 7)],0.0), ([(10 rightContains 33)],0.002848505633154641)][([(5 overlaps 53)],0.0), ([(38 matches 20)],0.0051419292392587135)][([(39 overlaps 45)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(23 overlaps 11)],1.9456580639176657E-4), ([(11 followedBy 31)],0.0020870246663982073)][([(15 contains 28)],1.270150185044283E-4), ([(56 matches 50)],0.002854094957552178)][([(29 matches 1)],6.299925046362453E-4), ([(55 leftContains 45)],0.0017089211363298107)][([(14 rightContains 39)],1.492878443665191E-5), ([(39 overlaps 13)],1.9861960665712441E-4)][([(51 meets 41)],0.0), ([(49 contains 22)],0.002854094957552178)][([(52 overlaps 59)],3.039813897899313E-4), ([(55 overlaps 36)],0.008595363785108279)][([(54 overlaps 60)],7.470374367392063E-4), ([(27 contains 7)],0.03845031652680586)][([(23 overlaps 11)],1.9456580639176657E-4), ([(48 leftContains 15)],0.0017089211363298107)][([(27 leftContains 57)],1.2859672458565008E-5), ([(10 rightContains 42)],1.7742882314319974E-4)][([(62 meets 32), (32 overlaps 1)],0.0), ([(62 meets 61)],0.0017089211363298107)][([(11 followedBy 31)],0.0020870246663982073), ([(3 rightContains 4)],0.012810811063588834)][([(34 meets 3)],2.154946234077526E-4), ([(27 contains 7)],0.03845031652680586)][([(39 overlaps 45)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(40 followedBy 21)],0.0016260374186159998), ([(43 meets 63)],0.002854094957552178)][([(8 rightContains 6)],2.904855361884895E-4), ([(18 overlaps 3)],0.00350074558871738)][([(57 contains 7)],0.0), ([(22 leftContains 30)],0.0013928873585743462)][([(21 contains 50)],2.154946234077526E-4), ([(6 contains 47)],0.0016428962085316412)][([(49 overlaps 33)],0.0), ([(19 overlaps 1)],7.859987625407072E-4)][([(38 meets 35)],0.0), ([(31 rightContains 41)],1.0150093997407517E-4)][([(14 rightContains 39)],1.492878443665191E-5), ([(54 followedBy 30)],0.003464434099751945)][([(20 overlaps 41)],0.0), ([(44 overlaps 18)],0.0)][([(27 leftContains 57)],1.2859672458565008E-5), ([(20 matches 47)],0.003422887354147086)][([(62 meets 32), (32 overlaps 1)],0.0), ([(23 overlaps 11)],1.9456580639176657E-4)][([(52 overlaps 44)],0.0), ([(53 leftContains 57)],0.0)][([(43 contains 12)],1.0150093997407517E-4), ([(41 leftContains 58)],0.002854094957552178)][([(54 contains 34)],0.0017089211363298107), ([(41 leftContains 58)],0.002854094957552178)][([(39 overlaps 13)],1.9861960665712441E-4), ([(62 meets 61)],0.0017089211363298107)][([(54 contains 45)],0.0), ([(8 meets 21)],0.002854094957552178)][([(8 rightContains 6)],2.904855361884895E-4), ([(3 rightContains 4)],0.012810811063588834)][([(40 contains 14)],1.0150093997407517E-4), ([(39 overlaps 45)],0.003422887354147086)][([(14 rightContains 39)],1.492878443665191E-5), ([(6 meets 9)],4.1161770872433223E-4)][([(40 followedBy 21)],0.0016260374186159998), ([(54 overlaps 23)],0.004394405791248612)][([(40 contains 9)],0.0), ([(51 meets 50)],0.0017089211363298107)][([(6 matches 43)],0.003422887354147086), ([(8 rightContains 11)],0.003975696313132215)][([(49 overlaps 33)],0.0), ([(42 meets 60)],0.0017089211363298107)][([(13 meets 1)],4.943864050742652E-4), ([(40 followedBy 39)],0.0033895836359914)][([(29 overlaps 14)],0.0017942487890275638), ([(18 overlaps 3)],0.00350074558871738)][([(31 rightContains 41)],1.0150093997407517E-4), ([(58 rightContains 18)],0.0012300145433652432)][([(49 overlaps 33)],0.0), ([(27 overlaps 55)],0.010540099768956757)][([(52 overlaps 44)],0.0), ([(19 followedBy 49)],4.1161770872433223E-4)][([(6 meets 9)],4.1161770872433223E-4), ([(55 leftContains 45)],0.0017089211363298107)][([(62 meets 61)],0.0017089211363298107), ([(27 contains 7)],0.03845031652680586)][([(5 overlaps 53)],0.0), ([(54 matches 9)],3.0729684555663717E-4)][([(20 overlaps 41)],0.0), ([(43 meets 63)],0.002854094957552178)][([(27 leftContains 57)],1.2859672458565008E-5), ([(37 leftContains 22)],0.004131884198587121)][([(52 overlaps 44)],0.0), ([(29 matches 1)],6.299925046362453E-4)][([(10 rightContains 42)],1.7742882314319974E-4), ([(19 overlaps 1)],7.859987625407072E-4)][([(6 contains 47)],0.0016428962085316412), ([(23 leftContains 24)],0.008963129080489018)][([(62 meets 61)],0.0017089211363298107), ([(22 contains 51)],0.0022544161489371772)][([(40 contains 9)],0.0), ([(49 overlaps 33)],0.0)][([(29 overlaps 14)],0.0017942487890275638), ([(49 contains 22)],0.002854094957552178)][([(53 meets 44)],0.0), ([(54 followedBy 15)],0.005459007014446349)][([(36 matches 36)],0.0), ([(37 leftContains 22)],0.004131884198587121)][([(39 overlaps 13)],1.9861960665712441E-4), ([(20 matches 47)],0.003422887354147086)][([(59 matches 40)],1.270150185044283E-4), ([(52 overlaps 59)],3.039813897899313E-4)][([(54 overlaps 60)],7.470374367392063E-4), ([(46 leftContains 12)],0.002279647088030967)][([(52 overlaps 44)],0.0), ([(57 contains 7)],0.0)][([(53 leftContains 57)],0.0), ([(40 followedBy 39)],0.0033895836359914)][([(32 contains 24)],0.0), ([(55 overlaps 36)],0.008595363785108279)][([(57 contains 7)],0.0), ([(49 contains 22)],0.002854094957552178)][([(13 meets 1)],4.943864050742652E-4), ([(37 leftContains 22)],0.004131884198587121)][([(6 matches 43)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(48 leftContains 15)],0.0017089211363298107), ([(6 matches 43)],0.003422887354147086)][([(54 contains 45)],0.0), ([(18 contains 54)],8.629532799018236E-4)][([(38 meets 35)],0.0), ([(54 matches 9)],3.0729684555663717E-4)][([(41 followedBy 33)],0.0022390605033846267), ([(54 followedBy 30)],0.003464434099751945)][([(48 leftContains 15)],0.0017089211363298107), ([(16 leftContains 52)],0.026752490774001103)][([(15 contains 28)],1.270150185044283E-4), ([(54 followedBy 30)],0.003464434099751945)][([(15 contains 28)],1.270150185044283E-4), ([(8 rightContains 6)],2.904855361884895E-4)][([(36 leftContains 36)],0.0), ([(23 contains 25)],0.009133584968094799)][([(46 leftContains 12)],0.002279647088030967), ([(40 followedBy 39)],0.0033895836359914)][([(36 matches 36)],0.0), ([(8 rightContains 6)],2.904855361884895E-4)][([(36 leftContains 36)],0.0), ([(6 matches 43)],0.003422887354147086)][([(16 meets 61), (61 leftContains 59)],0.0), ([(5 overlaps 16)],1.6850876611962384E-4)][([(51 meets 41)],0.0), ([(40 rightContains 5)],9.839517408294363E-6)][([(19 meets 43)],0.0), ([(55 leftContains 45)],0.0017089211363298107)][([(11 followedBy 31)],0.0020870246663982073), ([(40 followedBy 39)],0.0033895836359914)]",
				"[([(19 overlaps 1)],7.859987625407072E-4), ([(18 followedBy 51)],0.0018735786714009217)][([(58 rightContains 18)],0.0012300145433652432), ([(54 followedBy 15)],0.005459007014446349)][([(54 matches 9)],3.0729684555663717E-4), ([(29 matches 1)],6.299925046362453E-4)][([(31 rightContains 41)],1.0150093997407517E-4), ([(59 matches 40)],1.270150185044283E-4)][([(31 rightContains 41)],1.0150093997407517E-4), ([(13 meets 1)],4.943864050742652E-4)][([(19 meets 43)],0.0), ([(11 followedBy 31)],0.0020870246663982073)][([(19 overlaps 1)],7.859987625407072E-4), ([(46 contains 33)],0.01766627489528194)][([(40 contains 14)],1.0150093997407517E-4), ([(10 rightContains 33)],0.002848505633154641)][([(34 meets 3)],2.154946234077526E-4), ([(29 matches 1)],6.299925046362453E-4)][([(18 contains 54)],8.629532799018236E-4), ([(51 meets 50)],0.0017089211363298107)][([(14 rightContains 39)],1.492878443665191E-5), ([(62 meets 61)],0.0017089211363298107)][([(38 meets 35)],0.0), ([(19 overlaps 1)],7.859987625407072E-4)][([(5 overlaps 53)],0.0), ([(41 leftContains 58)],0.002854094957552178)][([(42 meets 60)],0.0017089211363298107), ([(56 matches 50)],0.002854094957552178)][([(15 contains 28)],1.270150185044283E-4), ([(3 leftContains 59)],0.001046680162928748)][([(22 contains 51)],0.0022544161489371772), ([(27 contains 7)],0.03845031652680586)][([(14 rightContains 39)],1.492878443665191E-5), ([(6 matches 43)],0.003422887354147086)][([(18 contains 54)],8.629532799018236E-4), ([(62 meets 61)],0.0017089211363298107)][([(38 contains 18)],7.470374367392063E-4), ([(1 leftContains 57)],0.00859323597987538)][([(11 meets 34)],0.0), ([(59 matches 40)],1.270150185044283E-4)][([(57 contains 7)],0.0), ([(10 rightContains 33)],0.002848505633154641)][([(5 overlaps 53)],0.0), ([(38 matches 20)],0.0051419292392587135)][([(39 overlaps 45)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(23 overlaps 11)],1.9456580639176657E-4), ([(11 followedBy 31)],0.0020870246663982073)][([(15 contains 28)],1.270150185044283E-4), ([(56 matches 50)],0.002854094957552178)][([(29 matches 1)],6.299925046362453E-4), ([(55 leftContains 45)],0.0017089211363298107)][([(14 rightContains 39)],1.492878443665191E-5), ([(39 overlaps 13)],1.9861960665712441E-4)][([(51 meets 41)],0.0), ([(49 contains 22)],0.002854094957552178)][([(52 overlaps 59)],3.039813897899313E-4), ([(55 overlaps 36)],0.008595363785108279)][([(54 overlaps 60)],7.470374367392063E-4), ([(27 contains 7)],0.03845031652680586)][([(23 overlaps 11)],1.9456580639176657E-4), ([(48 leftContains 15)],0.0017089211363298107)][([(27 leftContains 57)],1.2859672458565008E-5), ([(10 rightContains 42)],1.7742882314319974E-4)][([(62 meets 32), (32 overlaps 1)],0.0), ([(62 meets 61)],0.0017089211363298107)][([(11 followedBy 31)],0.0020870246663982073), ([(3 rightContains 4)],0.012810811063588834)][([(34 meets 3)],2.154946234077526E-4), ([(27 contains 7)],0.03845031652680586)][([(39 overlaps 45)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(40 followedBy 21)],0.0016260374186159998), ([(43 meets 63)],0.002854094957552178)][([(8 rightContains 6)],2.904855361884895E-4), ([(18 overlaps 3)],0.00350074558871738)][([(57 contains 7)],0.0), ([(22 leftContains 30)],0.0013928873585743462)][([(21 contains 50)],2.154946234077526E-4), ([(6 contains 47)],0.0016428962085316412)][([(49 overlaps 33)],0.0), ([(19 overlaps 1)],7.859987625407072E-4)][([(38 meets 35)],0.0), ([(31 rightContains 41)],1.0150093997407517E-4)][([(14 rightContains 39)],1.492878443665191E-5), ([(54 followedBy 30)],0.003464434099751945)][([(20 overlaps 41)],0.0), ([(44 overlaps 18)],0.0)][([(27 leftContains 57)],1.2859672458565008E-5), ([(20 matches 47)],0.003422887354147086)][([(62 meets 32), (32 overlaps 1)],0.0), ([(23 overlaps 11)],1.9456580639176657E-4)][([(52 overlaps 44)],0.0), ([(53 leftContains 57)],0.0)][([(43 contains 12)],1.0150093997407517E-4), ([(41 leftContains 58)],0.002854094957552178)][([(54 contains 34)],0.0017089211363298107), ([(41 leftContains 58)],0.002854094957552178)][([(39 overlaps 13)],1.9861960665712441E-4), ([(62 meets 61)],0.0017089211363298107)][([(54 contains 45)],0.0), ([(8 meets 21)],0.002854094957552178)][([(8 rightContains 6)],2.904855361884895E-4), ([(3 rightContains 4)],0.012810811063588834)][([(40 contains 14)],1.0150093997407517E-4), ([(39 overlaps 45)],0.003422887354147086)][([(14 rightContains 39)],1.492878443665191E-5), ([(6 meets 9)],4.1161770872433223E-4)][([(40 followedBy 21)],0.0016260374186159998), ([(54 overlaps 23)],0.004394405791248612)][([(40 contains 9)],0.0), ([(51 meets 50)],0.0017089211363298107)][([(6 matches 43)],0.003422887354147086), ([(8 rightContains 11)],0.003975696313132215)][([(49 overlaps 33)],0.0), ([(42 meets 60)],0.0017089211363298107)][([(13 meets 1)],4.943864050742652E-4), ([(40 followedBy 39)],0.0033895836359914)][([(29 overlaps 14)],0.0017942487890275638), ([(18 overlaps 3)],0.00350074558871738)][([(31 rightContains 41)],1.0150093997407517E-4), ([(58 rightContains 18)],0.0012300145433652432)][([(49 overlaps 33)],0.0), ([(27 overlaps 55)],0.010540099768956757)][([(52 overlaps 44)],0.0), ([(19 followedBy 49)],4.1161770872433223E-4)][([(6 meets 9)],4.1161770872433223E-4), ([(55 leftContains 45)],0.0017089211363298107)][([(62 meets 61)],0.0017089211363298107), ([(27 contains 7)],0.03845031652680586)][([(5 overlaps 53)],0.0), ([(54 matches 9)],3.0729684555663717E-4)][([(20 overlaps 41)],0.0), ([(43 meets 63)],0.002854094957552178)][([(27 leftContains 57)],1.2859672458565008E-5), ([(37 leftContains 22)],0.004131884198587121)][([(52 overlaps 44)],0.0), ([(29 matches 1)],6.299925046362453E-4)][([(10 rightContains 42)],1.7742882314319974E-4), ([(19 overlaps 1)],7.859987625407072E-4)][([(6 contains 47)],0.0016428962085316412), ([(23 leftContains 24)],0.008963129080489018)][([(62 meets 61)],0.0017089211363298107), ([(22 contains 51)],0.0022544161489371772)][([(40 contains 9)],0.0), ([(49 overlaps 33)],0.0)][([(29 overlaps 14)],0.0017942487890275638), ([(49 contains 22)],0.002854094957552178)][([(53 meets 44)],0.0), ([(54 followedBy 15)],0.005459007014446349)][([(36 matches 36)],0.0), ([(37 leftContains 22)],0.004131884198587121)][([(39 overlaps 13)],1.9861960665712441E-4), ([(20 matches 47)],0.003422887354147086)][([(59 matches 40)],1.270150185044283E-4), ([(52 overlaps 59)],3.039813897899313E-4)][([(54 overlaps 60)],7.470374367392063E-4), ([(46 leftContains 12)],0.002279647088030967)][([(52 overlaps 44)],0.0), ([(57 contains 7)],0.0)][([(53 leftContains 57)],0.0), ([(40 followedBy 39)],0.0033895836359914)][([(32 contains 24)],0.0), ([(55 overlaps 36)],0.008595363785108279)][([(57 contains 7)],0.0), ([(49 contains 22)],0.002854094957552178)][([(13 meets 1)],4.943864050742652E-4), ([(37 leftContains 22)],0.004131884198587121)][([(6 matches 43)],0.003422887354147086), ([(8 overlaps 56)],0.005623447975734885)][([(48 leftContains 15)],0.0017089211363298107), ([(6 matches 43)],0.003422887354147086)][([(54 contains 45)],0.0), ([(18 contains 54)],8.629532799018236E-4)][([(38 meets 35)],0.0), ([(54 matches 9)],3.0729684555663717E-4)][([(41 followedBy 33)],0.0022390605033846267), ([(54 followedBy 30)],0.003464434099751945)][([(48 leftContains 15)],0.0017089211363298107), ([(16 leftContains 52)],0.026752490774001103)][([(15 contains 28)],1.270150185044283E-4), ([(54 followedBy 30)],0.003464434099751945)][([(15 contains 28)],1.270150185044283E-4), ([(8 rightContains 6)],2.904855361884895E-4)][([(36 leftContains 36)],0.0), ([(23 contains 25)],0.009133584968094799)][([(46 leftContains 12)],0.002279647088030967), ([(40 followedBy 39)],0.0033895836359914)][([(36 matches 36)],0.0), ([(8 rightContains 6)],2.904855361884895E-4)][([(36 leftContains 36)],0.0), ([(6 matches 43)],0.003422887354147086)][([(16 meets 61), (61 leftContains 59)],0.0), ([(5 overlaps 16)],1.6850876611962384E-4)][([(51 meets 41)],0.0), ([(40 rightContains 5)],9.839517408294363E-6)][([(19 meets 43)],0.0), ([(55 leftContains 45)],0.0017089211363298107)][([(11 followedBy 31)],0.0020870246663982073), ([(40 followedBy 39)],0.0033895836359914)]");
		//toAdd:
		assertEquals(
				"[(19 overlaps 1)][(58 rightContains 18)][(54 matches 9)][(31 rightContains 41)][(31 rightContains 41)][(19 meets 43)][(19 overlaps 1)][(40 contains 14)][(34 meets 3)][(18 contains 54)][(14 rightContains 39)][(38 meets 35)][(5 overlaps 53)][(42 meets 60)][(15 contains 28)][(22 contains 51)][(14 rightContains 39)][(18 contains 54)][(38 contains 18)][(11 meets 34)][(57 contains 7)][(5 overlaps 53)][(39 overlaps 45)][(23 overlaps 11)][(15 contains 28)][(29 matches 1)][(14 rightContains 39)][(51 meets 41)][(52 overlaps 59)][(54 overlaps 60)][(23 overlaps 11)][(27 leftContains 57)][(62 meets 32), (32 overlaps 1)][(11 followedBy 31)][(34 meets 3)][(39 overlaps 45)][(40 followedBy 21)][(8 rightContains 6)][(57 contains 7)][(21 contains 50)][(49 overlaps 33)][(38 meets 35)][(14 rightContains 39)][(20 overlaps 41)][(27 leftContains 57)][(62 meets 32), (32 overlaps 1)][(52 overlaps 44)][(43 contains 12)][(54 contains 34)][(39 overlaps 13)][(54 contains 45)][(8 rightContains 6)][(40 contains 14)][(14 rightContains 39)][(40 followedBy 21)][(40 contains 9)][(6 matches 43)][(49 overlaps 33)][(13 meets 1)][(29 overlaps 14)][(31 rightContains 41)][(49 overlaps 33)][(52 overlaps 44)][(6 meets 9)][(62 meets 61)][(5 overlaps 53)][(20 overlaps 41)][(27 leftContains 57)][(52 overlaps 44)][(10 rightContains 42)][(6 contains 47)][(62 meets 61)][(40 contains 9)][(29 overlaps 14)][(53 meets 44)][(36 matches 36)][(39 overlaps 13)][(59 matches 40)][(54 overlaps 60)][(52 overlaps 44)][(53 leftContains 57)][(32 contains 24)][(57 contains 7)][(13 meets 1)][(6 matches 43)][(48 leftContains 15)][(54 contains 45)][(38 meets 35)][(41 followedBy 33)][(48 leftContains 15)][(15 contains 28)][(15 contains 28)][(36 leftContains 36)][(46 leftContains 12)][(36 matches 36)][(36 leftContains 36)][(16 meets 61), (61 leftContains 59)][(51 meets 41)][(19 meets 43)][(11 followedBy 31)]",
				"[(19 overlaps 1)][(58 rightContains 18)][(54 matches 9)][(31 rightContains 41)][(31 rightContains 41)][(19 meets 43)][(19 overlaps 1)][(40 contains 14)][(34 meets 3)][(18 contains 54)][(14 rightContains 39)][(38 meets 35)][(5 overlaps 53)][(42 meets 60)][(15 contains 28)][(22 contains 51)][(14 rightContains 39)][(18 contains 54)][(38 contains 18)][(11 meets 34)][(57 contains 7)][(5 overlaps 53)][(39 overlaps 45)][(23 overlaps 11)][(15 contains 28)][(29 matches 1)][(14 rightContains 39)][(51 meets 41)][(52 overlaps 59)][(54 overlaps 60)][(23 overlaps 11)][(27 leftContains 57)][(62 meets 32), (32 overlaps 1)][(11 followedBy 31)][(34 meets 3)][(39 overlaps 45)][(40 followedBy 21)][(8 rightContains 6)][(57 contains 7)][(21 contains 50)][(49 overlaps 33)][(38 meets 35)][(14 rightContains 39)][(20 overlaps 41)][(27 leftContains 57)][(62 meets 32), (32 overlaps 1)][(52 overlaps 44)][(43 contains 12)][(54 contains 34)][(39 overlaps 13)][(54 contains 45)][(8 rightContains 6)][(40 contains 14)][(14 rightContains 39)][(40 followedBy 21)][(40 contains 9)][(6 matches 43)][(49 overlaps 33)][(13 meets 1)][(29 overlaps 14)][(31 rightContains 41)][(49 overlaps 33)][(52 overlaps 44)][(6 meets 9)][(62 meets 61)][(5 overlaps 53)][(20 overlaps 41)][(27 leftContains 57)][(52 overlaps 44)][(10 rightContains 42)][(6 contains 47)][(62 meets 61)][(40 contains 9)][(29 overlaps 14)][(53 meets 44)][(36 matches 36)][(39 overlaps 13)][(59 matches 40)][(54 overlaps 60)][(52 overlaps 44)][(53 leftContains 57)][(32 contains 24)][(57 contains 7)][(13 meets 1)][(6 matches 43)][(48 leftContains 15)][(54 contains 45)][(38 meets 35)][(41 followedBy 33)][(48 leftContains 15)][(15 contains 28)][(15 contains 28)][(36 leftContains 36)][(46 leftContains 12)][(36 matches 36)][(36 leftContains 36)][(16 meets 61), (61 leftContains 59)][(51 meets 41)][(19 meets 43)][(11 followedBy 31)]");
	}
	
	@Test
	public void getBestAfterFirstAndSecondGen() throws IOException{
		Random random = new Random(13);
		TournamentSelection myTournamentSelection = new TournamentSelection(tournamentSize, p, random);
		List<NShapelet> features = getBestAfterFirstGenFeatures(random,2, 0, myTournamentSelection);
		random = new Random(13);
		List<NShapelet> features2 = getBestAfterFirstGenFeatures(random,2, 0, myTournamentSelection);
		assertFeatureEquality(features,features2);
		features = getBestAfterFirstGenFeatures(random,2, 1, myTournamentSelection);
		random = new Random(13);
		features2 = getBestAfterFirstGenFeatures(random,2, 1, myTournamentSelection);
		assertFeatureEquality(features,features2);
	}

	private List<NShapelet> getBestAfterFirstGenFeatures(Random random, int numGenerations, int afterGen, TournamentSelection tournamentSelection) throws IOException {
		File testData = new File("data/singleLabelDatasets/HEPATITIS");
		List<Sequence> database = IOService.readSequenceData(testData);
		List<Integer> classIds = IOService.readClassData(testData);
		//mutator
		List<Pair<MutationStrategy<NShapelet>, Double>> operators = new ArrayList<>();
		int maxEventLabel = Sequence.getDimensionSet(database).descendingIterator().next();
		//training and test data split
		List<Integer> allIndices = ExperimentUtil.getShuffledIndices(database, random);
		List<Integer> trainIndices = ExperimentUtil.getTrainingIndices(allIndices, 0,10);
		List<Sequence> train = ExperimentUtil.getAll(database,trainIndices);
		List<Integer> trainClassIds = ExperimentUtil.getAll(classIds,trainIndices);	
		
		operators.add(new Pair<>(new ShapeletAppender(random, maxEventLabel ),  0.02));
		operators.add(new Pair<>(new ShapeletEndEventMutator(random, maxEventLabel ),  0.4));
		operators.add(new Pair<>(new ShapeletEndRelationshipMutator(random),  0.4));
		operators.add(new Pair<>(new ShapeletEndRemover(random),  0.02));
		
		WeightedCompositeMutator mutator = new WeightedCompositeMutator(random, operators );
		SelectionAlgorithm<NShapelet> selectionStrategy = tournamentSelection;
		FitnessEvaluator<NShapelet> evaluator = new NShapeletFitnessEvaluator(train, trainClassIds, epsilon );
		EvolutionEngine<NShapelet> engine = new EvolutionEngine<>(populationSize , numGenerations, mutator, selectionStrategy , evaluator , 75,NShapelet.nShapeletComparator);
		engine.runEvolution(getInitialGeneration(train,random));
		//engine.printBest();
		return engine.getAllBest().get(afterGen);
	}
}
